function Reference()
  result = diag.drawMenu("NexEngine",colors.cyan,"clearScreen()","newLine()","nextLine()","waitForKey()","drawSplash()","drawDialog()","drawMenu()","Exit")
  
  if result == 1 then
    diag.drawDialog("NexEngine",colors.cyan)
    write("clearScreen()")
    diag.nextLine(3)
    write("Clears the screen of all data,")
    diag.nextLine()
    write("and resets the cursor position to 1,1.")
    diag.nextLine(2)
    write("Useful for quick screen resets.")
    diag.waitForKey()
    Reference()
  elseif result == 2 then
    diag.drawDialog("NexEngine",colors.cyan)
    write("newLine()")
    diag.nextLine(3)
    write("Sets the cursor 'x' to 1 and moves down a line.")
    diag.nextLine(2)
    write("Useful for writing multi-line screens.")
    diag.waitForKey()
    Reference()
  elseif result == 3 then
    diag.drawDialog("NexEngine",colors.cyan)
    write("nextLine([count])")
    diag.nextLine(3)
    write("Sets the cursor 'x' to 3, and moves down a")
    diag.nextLine()
    write("[count] number of lines.")
    diag.nextLine()
    write("[count] is optional.")
    diag.nextLine(2)
    write("Useful for dialog boxes, as the area begins")
    diag.nextLine()
    write("at 'x' 3.")
    diag.waitForKey()
    Reference()
  elseif result == 4 then
    diag.drawDialog("NexEngine",colors.cyan)
    write("waitForKey()")
    diag.nextLine(3)
    write("Pauses the console until any key is pressed.")
    diag.nextLine(2)
    write("Works best with dialog boxes.")
    diag.waitForKey()
    Reference()
  elseif result == 5 then
    diag.drawDialog("NexEngine",colors.cyan)
    write("drawSplash(titleText,splashColor)")
    diag.nextLine(3)
    write("Draws a splash window, with the color of")
    diag.nextLine()
    write("'splashColor' and text 'titleText'.")
    diag.waitForKey()
    Reference()
  elseif result == 6 then
    diag.drawDialog("NexEngine",colors.cyan)
    write("drawDialog([watermarkText],[borderColor])")
    diag.nextLine(3)
    write("Draws a dialog box, exactly like this one.")
    diag.nextLine()
    write("[watermarkText] is the text in the corner.")
    diag.nextLine()
    write("[watermarkText] is optional.")
    diag.nextLine(2)
    write("[borderColor] is the color of the dialog.")
    diag.nextLine()
    write("[borderColor] is optional.")
    diag.waitForKey()
    Reference()
  elseif result == 7 then
    diag.drawDialog("NexEngine",colors.cyan)
    write("drawMenu([watermarkText],[borderColor],o1,o2...")
    diag.nextLine(3)
    write("Draws a dialog box, then places a menu inside.")
    diag.nextLine()
    write("Menu can have up to 10 options.")
    diag.nextLine(2)
    write("Returns index of chosen item.")
    diag.waitForKey()
    Reference()
  elseif result == 8 then
    load()
  end
end

function License()
  diag.drawDialog("NexEngine",colors.cyan)
  write("NexEngine License")
  diag.nextLine(3)
  write("This API has been released under")
  diag.nextLine()
  write("the Creative Commons 3.0 license.")
  term.setCursorPos(3,yMax-1)
  write("Press any key to return")
  os.pullEvent("key")
  shell.run("/disk/documentation")
end

function Credits()
  diag.drawDialog("NexEngine",colors.cyan)
  write("NexEngine Credits and Contributions")
  diag.nextLine(3)
  write("The NexEngine API was written by")
  diag.nextLine()
  write("Eohiie and Reichelderferm.")
  diag.nextLine(2)
  write("Bug testing handled by Wjmpdx and Xion.")
  term.setCursorPos(3,yMax-1)
  write("Press any key to return")
  os.pullEvent("key")
  shell.run("/disk/documentation")
end

function load()
os.loadAPI("/disk/apis/diag")
result = diag.drawMenu("NexEngine",colors.cyan,"Reference","License","Credits","Exit")

if result == 1 then
  Reference()
elseif result == 2 then
  License()
elseif result == 3 then
  Credits()
elseif result == 4 then
  shell.run("disk/startup")
end
end

load()